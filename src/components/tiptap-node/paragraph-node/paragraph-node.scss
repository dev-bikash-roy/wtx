/* =====================
     CORE EDITOR STYLES
     ===================== */
.tiptap.ProseMirror {
  white-space: pre-wrap;
  outline: none;

  // Selection styles
  &:not(.readonly):not(.ProseMirror-hideselection) {
    ::selection {
      background-color: var(--tt-selection-color);
    }

    .selection::selection {
      background: transparent;
    }
  }

  .selection {
    display: inline;
    background-color: var(--tt-selection-color);
  }

  .ProseMirror-hideselection {
    caret-color: transparent;
  }

  // Placeholder
  > p.is-editor-empty::before {
    content: attr(data-placeholder);
    pointer-events: none;
    color: var(--placeholder-color);
    float: left;
    height: 0;
  }

  &:where(:dir(rtl), [dir='rtl'], [dir='rtl'] *) {
    > p.is-editor-empty::before {
      float: right;
    }
  }

  // Resize cursor
  &.resize-cursor {
    cursor: ew-resize;
    cursor: col-resize;
  }
}

/* =====================
     GAP CURSOR
     ===================== */
.tiptap.ProseMirror {
  .ProseMirror-gapcursor {
    display: none;
    pointer-events: none;
    position: absolute;

    &:after {
      content: '';
      display: block;
      position: absolute;
      top: 1em;
      width: 1.25em;
      border-top: 1px solid black;
      animation: ProseMirror-cursor-blink 1.1s steps(2, start) infinite;
    }
  }

  &.ProseMirror-focused,
  &.ProseMirror.ProseMirror-focused {
    .ProseMirror-gapcursor {
      display: block;
    }
  }
}

@keyframes ProseMirror-cursor-blink {
  to {
    visibility: hidden;
  }
}

/* =====================
     TEXT DECORATION
     ===================== */
.tiptap.ProseMirror {
  // Text decoration inheritance for spans
  a span {
    text-decoration: underline;
  }

  s span {
    text-decoration: line-through;
  }

  u span {
    text-decoration: underline;
  }
}

/* =====================
     COLLABORATION
     ===================== */
.tiptap.ProseMirror {
  .collaboration-cursor {
    &__caret {
      border-right: 1px solid transparent;
      border-left: 1px solid transparent;
      pointer-events: none;
      margin-left: -1px;
      margin-right: -1px;
      position: relative;
      word-break: normal;
    }

    &__label {
      border-radius: 0.25rem;
      border-bottom-left-radius: 0;
      font-size: 0.75rem;
      font-weight: 600;
      left: -1px;
      line-height: 1;
      padding: 0.125rem 0.375rem;
      position: absolute;
      top: -1.3em;
      user-select: none;
      white-space: nowrap;
    }
  }
}

/* =====================
     EMOJI
     ===================== */
.tiptap.ProseMirror [data-type='emoji'] img {
  display: inline-block;
  width: 1.25em;
  height: 1.25em;
  cursor: text;
}

/* =====================
     HORIZONTAL RULE
     ===================== */
.tiptap.ProseMirror {
  hr {
    margin-top: 3em;
    margin-bottom: 3em;
    border: none;
    height: 1px;
    background-color: var(--separator-color);
  }

  &.ProseMirror-focused {
    hr.ProseMirror-selectednode {
      border-radius: 9999px;
      outline: 3px solid var(--tt-brand-color-500);
      outline-offset: 2px;
    }
  }
}

/* =====================
     LINKS
     ===================== */
.tiptap.ProseMirror {
  a {
    color: var(--link-text-color);
    text-decoration: underline;
  }
}

/* =====================
     PLACEHOLDER
     ===================== */
.is-empty:not(h1)[data-placeholder]:has(> .ProseMirror-trailingBreak:only-child):before {
  pointer-events: none;
  height: 0;
  position: absolute;
  font-style: italic;
}

.is-empty[data-placeholder]:has(> .ProseMirror-trailingBreak):before {
  color: var(--color-neutral-600);
}

.tiptap.ProseMirror .is-empty {
  &::before {
    color: var(--color-neutral-600);
    content: attr(data-placeholder);
    float: left;
    height: 0;
    pointer-events: none;
  }
}

:where(:dir(rtl), [dir='rtl'], [dir='rtl'] *) {
  .tiptap.ProseMirror .is-empty {
    &::before {
      float: right;
    }
  }
}

.dark .tiptap.ProseMirror .is-empty {
  &::before {
    color: var(--color-neutral-300);
  }
}
